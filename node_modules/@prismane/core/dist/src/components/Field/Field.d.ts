import { ReactNode } from "react";
import { FlexProps } from "../Flex/Flex";
import { TransitionProps } from "../Transition/Transition";
import { PrismaneFieldComponent, PrismaneWithInternal, Versatile, PrismaneVersatile } from "../../types";
import { FieldErrorProps } from "./FieldError/FieldError";
import { FieldLabelProps } from "./FieldLabel/FieldLabel";
import { FieldWrapperProps } from "./FieldWrapper/FieldWrapper";
import { FieldAddonProps } from "./FieldAddon/FieldAddon";
export { type FieldErrorProps, type FieldLabelProps, type FieldWrapperProps, type FieldAddonProps, };
export type FieldProps<E extends Versatile = "input"> = PrismaneVersatile<E, {
    type?: string;
    placeholder?: string;
    readOnly?: boolean;
    maxLength?: number;
    minLength?: number;
    icon?: ReactNode;
    validating?: boolean;
    disabled?: boolean;
} & FlexProps<E> & TransitionProps<E> & PrismaneFieldComponent>;
/**
 * A form field component that renders an input element wrapped in a customizable box, with support for icons, labels, errors, and addons.
 *
 * @typedef {object} FieldProps
 * @property {string} [placeholder] - The placeholder text for the input field.
 * @property {string} [type] - The type of the input field.
 * @property {boolean} [readOnly] - Whether the input field is read-only.
 * @property {number} [min] - The minimum value for the input field.
 * @property {number} [max] - The maximum value for the input field.
 * @property {ReactNode} [icon] - The icon to display on the left side of the input field.
 * @property {string | null} [error] - The error message to display.
 * @property {boolean} [validating] - Whether the input field is currently being validated.
 * @property {ReactNode} [addons] - Additional elements to render after the input field.
 * @property {Versatile} [as] - The HTML tag to use for the input element. Defaults to "input".
 * @property {string} [size] - The size of the input field.
 * @property {FieldLabelProps} [Label] - A custom label component to use.
 * @property {FieldWrapperProps} [Wrapper] - A custom wrapper component to use.
 * @property {FieldErrorProps} [Error] - A custom error component to use.
 * @property {string} [className] - The class name to apply to the root element.
 *
 * @template E - The HTML element type of the input element.
 * @extends {FlexProps<E> & PrismaneFieldComponent}
 * @property {ForwardedRef<any>} ref - A ref to the input element.
 * @returns {JSX.Element} The rendered Field component.
 */
declare const Field: PrismaneWithInternal<PrismaneVersatile<Versatile, FieldProps<"input">>, {
    Label: FieldLabelProps;
    Wrapper: FieldWrapperProps;
    Error: FieldErrorProps;
    Addon: FieldAddonProps;
}>;
export default Field;
//# sourceMappingURL=Field.d.ts.map